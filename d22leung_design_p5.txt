CLASS DESIGN

I still used the MultiCountry class from the previous projects, just added on. I used maps, sets, and tuples from the std class to implement the graph. I used a two map system with an outer map mapping to the country from which the edge originiated from and an inner map holding all the edges that came from the country. In the inner map, I stored a vector of tuples to store all the possible relationships between one country and another. I used SingleCountry pointers as the indexes for both maps as I didn't read ahead and I was scared that I would need to like access the countries index later. I used maps since they are O(1) lookup, sets since they automatically don't accept duplicates, and vectors since they are easy to use.

ALTERNATIVES AND JUSTIFICATION

I used maps since they are O(1) lookup, sets since they automatically don't accept duplicates, and vectors since they are easy to use. I used these std structures since they were made available for me this project and they are very convinient to implement and use. Maps alongside hashes can turn anything into keys, making it possible for me to use SingleCountry pointers for keys. For an alternative, I could've used a two dimensional dynamic array that resized, but that was too much work. I could've also used a linked list instead of a vector, but that would've been a lot of work too. I could've also used a dynamic array or a linked list instead of a set, but that would've been too much work.

RUNTIME ANALYSIS

My load is O(n) since I need to load all the countries one by one. My intialize is O(n) since I need to intialize all the countries one by one. For update edges, that is O(n^2) since I need to go through all countires that need the edges and map each edge from all of the countries to all of the other countires. Adjacent is O(n) since it needs to go one by one to print out each of the edges. My path is O(N + E) with N nodes, and E edges since I used DFS which at worse case will run through all the paths before concluding that there is no path. Relationships is O(N), since it needs to print out all the relationships one by one.


RUNTIME:

Adjacent is O(N), since a map does lookup in O(1), but it still needs to print out all N adjacent countries one by one, so the runtime is O(N). So first I lookup the starting country in the map in O(1), then I go through the second map inside the first one and begin to print out all the countries inside the second map since they are the countries that share an edge with the inputted country. Since I go through each country and print it individually, it is O(N), if you have N countries that share edges.